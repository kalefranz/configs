#!/usr/bin/python
"""
This script collects ifconfig output and prints private ipv4 addresses for attached interfaces.
Example:
    >>  main()
        en0: 192.168.1.10     utun0: 10.2.6.18
"""
import re
import subprocess
import sys


IGNORE_INTERFACES = ('vmnet', 'lo')

NEW_GROUP_REGEX = re.compile(r'^[a-z]+?[0-9]?')
INET4_LINE_REGEX = re.compile(r'^[ \t]+?inet ')
SIMPLE_IPV4_REGEX = re.compile(r'[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')


def check_version():
    if (2, 4) > sys.version_info < (3,0):
        sys.stderr.write("This script is compatible with python [2.4, 3.0).")
        exit(1)


def _get_ifconfig_lines():
    p = subprocess.Popen('/sbin/ifconfig', stdout=subprocess.PIPE)
    stdout = p.communicate()[0]
    return stdout.split('\n')


def _convert_lines_to_map(stdout_lines):
    iface_map = dict()
    current_iface = None
    for line in stdout_lines:
        if NEW_GROUP_REGEX.match(line):
            current_iface = line.split()[0].split(':')[0].strip()
            if sum(current_iface.startswith(ignore) for ignore in IGNORE_INTERFACES):
                current_iface = None
        elif INET4_LINE_REGEX.match(line):
            match = SIMPLE_IPV4_REGEX.search(line)
            if match and current_iface:
                iface_map[current_iface] = match.group(0)
    return iface_map


def get_interfaces():
    """Returns a map of ipv4 addresses keyed with the interface name.
    Example:
        >>  get_interfaces
            {'en0': '192.168.1.10', 'utun0': '10.2.6.18'}
    """
    return _convert_lines_to_map(_get_ifconfig_lines())


def format_output(ip4_map):
    space = ' ' * 5
    return space.join(["%s: %s" % (iface, ip4_map[iface]) for iface in sorted(ip4_map)])


def main():
    check_version()
    print format_output(get_interfaces())


if __name__ == "__main__":
    main()
